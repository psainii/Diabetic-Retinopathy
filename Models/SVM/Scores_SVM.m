
rng default;
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Prateek\Desktop\Explo\WITH_NOISE (1).csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/04/14 20:22:56

%% Initialize variables.
filename = '..\..\Datasets\WITH_NOISE (1).csv';
delimiter = ',';

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
WITHNOISE1 = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;
[M,N]=size(WITHNOISE1);
avgaccu=0;
avgtime=0;
boxpl=zeros(10,2);
nsens=0;
nspecs=0;
nprec=0;
nf1=0;
%Specifying the seed value
s = RandStream('mt19937ar','Seed',0);
for i=1:10
    rand_pos = randperm(s,M); %array of random positions
    % new array with original data randomly distributed
    data=zeros(M,N);
    for k = 1:M
        data(k,:) = WITHNOISE1(rand_pos(k),:);
    end

    features=data(:,1:end-1);
    labels=data(:,end);
    % Normalize labels
    features=zscore(features);
    labels(labels==0)=-1;
    % Normalize labels


    % Separate training and test data (80:20 split)
    total_samples=size(features,1);
    train_samples=round(0.8*total_samples);

    % Define training and test samples
    xTrain=features(1:train_samples,:);
    yTrain=labels(1:train_samples,:);
    xTest=features(train_samples+1:end,:);
    yTest=labels(train_samples+1:end,:);
    yTest(yTest==-1)=0;
    %Defining Hyperparameters
    C=0.08;
    
    [w,b,time]=SVM(xTrain, yTrain, C );
    avgtime=avgtime+time;
    [n,m]=size(xTest);
    
    yPred=(xTest*w'+b*ones(n,1))>0;
    yTest=int8(yTest);
    yPred=int8(yPred);
    %Calculating F1 Score, Sensitivity, Specificity and Precision.
    C = confusionmat(yTest,yPred);
    sensitivity=C(1,1)/(C(1,1)+C(1,2));
    specificity=C(2,2)/(C(2,1)+C(2,2));
    precision=C(1,1)/(C(1,1)+C(2,1));
    F1_score=200*precision*sensitivity/(precision+sensitivity);
    %accuracy=(sum(yPred==yTest)/length(yTest))*100;   
    if(F1_score<50)
        yPred=(xTest*w'+b*ones(n,1))<0;
        yTest=int8(yTest);
        yPred=int8(yPred);
        C = confusionmat(yTest,yPred);
        sensitivity=C(1,1)/(C(1,1)+C(1,2));
        specificity=C(2,2)/(C(2,1)+C(2,2));
        precision=C(1,1)/(C(1,1)+C(2,1));
        F1_score=2*precision*sensitivity/(precision+sensitivity);
    end
    %boxpl(i,2)=accuracy;
    nsens=nsens+sensitivity/10;
    nspecs=nspecs+specificity/10;
    nprec=nprec+precision/10;
    nf1=nf1+F1_score/10;
end
%Importing without noise file

%% Initialize variables.
filename = '..\..\Datasets\WITHOUT_NOISE (1).csv';
delimiter = ',';

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
WITHOUTNOISE1 = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;
[M,N]=size(WITHOUTNOISE1);
avgaccu=0;
avgtime=0;
sens=0;
specs=0;
prec=0;
f1=0;
for i=1:10
    rand_pos = randperm(s,M); %array of random positions
    % new array with original data randomly distributed
    data=zeros(M,N);
    for k = 1:M
        data(k,:) = WITHOUTNOISE1(rand_pos(k),:);
    end

    features=data(:,1:end-1);
    labels=data(:,end);
    % Normalize labels
    features=zscore(features);
    labels(labels==0)=-1;
    % Normalize labels

    % Separate training and test data (80:20 split)
    total_samples=size(features,1);
    train_samples=round(0.8*total_samples);

    % Define training and test samples
    xTrain=features(1:train_samples,:);
    yTrain=labels(1:train_samples,:);
    xTest=features(train_samples+1:end,:);
    yTest=labels(train_samples+1:end,:);
    yTest(yTest==-1)=0;
    %Defining Hyperparameters
    C=0.02;
    
    [w,b,time]=SVM(xTrain, yTrain, C );
    avgtime=avgtime+time;
    [n,m]=size(xTest);
    yPred=(xTest*w'+b*ones(n,1))>0;
    yTest=int8(yTest);
    yPred=int8(yPred);
    %Calculating F1 Score, Sensitivity, Specificity and Precision.
    C = confusionmat(yTest,yPred);
    sensitivity=C(1,1)/(C(1,1)+C(1,2));
    specificity=C(2,2)/(C(2,1)+C(2,2));
    precision=C(1,1)/(C(1,1)+C(2,1));
    F1_score=200*precision*sensitivity/(precision+sensitivity);
    %accuracy=(sum(yPred==yTest)/length(yTest))*100;   
    if(F1_score<50)
        yPred=(xTest*w'+b*ones(n,1))<0;
        yTest=int8(yTest);
        yPred=int8(yPred);
        C = confusionmat(yTest,yPred);
        sensitivity=C(1,1)/(C(1,1)+C(1,2));
        specificity=C(2,2)/(C(2,1)+C(2,2));
        precision=C(1,1)/(C(1,1)+C(2,1));
        F1_score=2*precision*sensitivity/(precision+sensitivity);
    end
    sens=sens+sensitivity/10;
    specs=specs+specificity/10;
    prec=prec+precision/10;
    f1=f1+F1_score/10;
end;
%Displaying the results
disp('The results for with noise dataset');
disp('Sensitivity');
disp(nsens*100);
disp('Specificity');
disp(nspecs*100);
disp('Precision');
disp(nprec*100);
disp('F1 Score');
disp(nf1);
disp('The results for without noise dataset');
disp('Sensitivity');
disp(sens*100);
disp('Specificity');
disp(specs*100);
disp('Precision');
disp(prec*100);
disp('F1 Score');
disp(f1);